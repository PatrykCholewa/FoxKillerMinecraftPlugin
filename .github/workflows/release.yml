name: Release Workflow

on:
  release:
    types: [created]

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Java environment
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Check if release is a draft
      - name: Check if release is a draft
        id: check_draft
        run: |
          if [ "${{ github.event.release.draft }}" != "true" ]; then
            echo "This workflow only runs on draft releases. Exiting."
            exit 1
          fi

      # Extract version from the release tag
      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          echo "RELEASE_VERSION=${MAJOR}.${MINOR}.${PATCH}-1.21.3" >> $GITHUB_ENV
          echo "NEXT_SNAPSHOT_VERSION=${MAJOR}.${MINOR}.$((PATCH + 1))-1.21.3-SNAPSHOT" >> $GITHUB_ENV

      # Update pom.xml to release version
      - name: Update version in pom.xml for release
        run: |
          mvn versions:set -DnewVersion="${{ env.RELEASE_VERSION }}"
          mvn versions:commit

      # Commit the updated pom.xml for release version
      - name: Commit updated pom.xml
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -am "Set version to ${{ env.RELEASE_VERSION }}"

      # Build the project
      - name: Build with Maven
        run: |
          mvn install
          mvn package

      # Upload JAR files to GitHub Release
      - name: Upload JAR files to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "${{ github.workspace }}/target/*.jar"
      
      # Create a new tag for the release version
      - name: Create tag for release
        run: |
          git tag "v${{ env.RELEASE_VERSION }}"

      # Update pom.xml to next SNAPSHOT version
      - name: Update version in pom.xml to next SNAPSHOT
        run: |
          mvn versions:set -DnewVersion="${{ env.NEXT_SNAPSHOT_VERSION }}"
          mvn versions:commit

      # Commit updated pom.xml for next SNAPSHOT version
      - name: Commit next SNAPSHOT version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -am "Set version to ${{ env.NEXT_SNAPSHOT_VERSION }}"

      # Push changes back to the repository
      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Publish the draft release
      - name: Publish draft release
        if: ${{ steps.check_draft.outcome == 'success' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release_id = context.payload.release.id;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release_id,
              draft: false
            });
